{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationForm = exports.Checkbox = exports.SelectGroup = exports.FileInput = exports.Radio = exports.TextInputGroup = exports.TextInput = exports.BaseFormControl = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.parseFileSize = parseFileSize;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nrequire('./polyfill');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction parseFileSize(size) {\n  var num = parseFloat(size, 10);\n  var unit = size.match(/[a-zA-Z]+/)[0];\n  unit = unit.toLowerCase();\n\n  switch (unit) {\n    case \"b\":\n      return num;\n\n    case \"kb\":\n      return 1024 * num;\n\n    case \"mb\":\n      return 1024 * 1024 * num;\n\n    case \"gb\":\n      return 1024 * 1024 * 1024 * num;\n\n    default:\n      throw new Error(\"Unknown unit \" + unit);\n  }\n}\n\nvar BaseFormControl = exports.BaseFormControl = function (_React$Component) {\n  _inherits(BaseFormControl, _React$Component);\n\n  function BaseFormControl(props) {\n    _classCallCheck(this, BaseFormControl);\n\n    var _this = _possibleConstructorReturn(this, (BaseFormControl.__proto__ || Object.getPrototypeOf(BaseFormControl)).call(this, props));\n\n    _this.setError = function (errorMessage) {\n      _this.getInputRef().setCustomValidity(errorMessage);\n\n      _this.setState({\n        errorMessage: errorMessage\n      });\n    };\n\n    _this.clearError = function () {\n      return _this.setError(\"\");\n    };\n\n    _this.checkError = function (e) {\n      var isPristine = _this.state.isPristine;\n      if (isPristine) _this.setDirty();\n\n      _this.buildErrorMessage();\n\n      _this.changeInputErrorClass();\n    };\n\n    _this.handleBlur = function (e) {\n      if (_this.context.validationForm.immediate) return;\n\n      _this.checkError();\n    };\n\n    _this.handleChange = function (e) {\n      if (_this.props.onChange) _this.props.onChange(e);\n      if (!_this.context.validationForm.immediate) return;\n\n      _this.checkError();\n    };\n\n    _this.validateInput = function () {\n      _this.setDirty();\n\n      _this.buildErrorMessage();\n    };\n\n    _this.setDirty = function () {\n      _this.setState({\n        isPristine: false\n      });\n    };\n\n    _this.filterProps = function () {\n      var _this$props = _this.props,\n          errorMessage = _this$props.errorMessage,\n          successMessage = _this$props.successMessage,\n          validator = _this$props.validator,\n          defaultErrorMessage = _this$props.defaultErrorMessage,\n          attachToForm = _this$props.attachToForm,\n          detachFromForm = _this$props.detachFromForm,\n          setFormDirty = _this$props.setFormDirty,\n          label = _this$props.label,\n          immediate = _this$props.immediate,\n          rest = _objectWithoutProperties(_this$props, ['errorMessage', 'successMessage', 'validator', 'defaultErrorMessage', 'attachToForm', 'detachFromForm', 'setFormDirty', 'label', 'immediate']);\n\n      return rest;\n    };\n\n    _this.state = {\n      isPristine: true,\n      errorMessage: \"\"\n    };\n    if (_react2.default.createRef) _this.inputRef = _react2.default.createRef();else _this.inputRef = function (element) {\n      //Before React 16.3\n      _this.inputRefLegacy = element;\n    };\n    return _this;\n  }\n\n  _createClass(BaseFormControl, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.context.validationForm.attachToForm(this);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.context.validationForm.detachFromForm(this);\n    }\n  }, {\n    key: 'getInputRef',\n    value: function getInputRef() {\n      return this.inputRefLegacy || this.inputRef.current;\n    }\n  }, {\n    key: 'buildErrorMessage',\n    value: function buildErrorMessage() {\n      var map = {\n        valueMissing: \"required\",\n        customError: \"\",\n        stepMismatch: \"step\",\n        patternMismatch: \"pattern\",\n        rangeUnderflow: \"min\",\n        rangeOverflow: \"max\",\n        typeMismatch: \"type\"\n      };\n      var errorMessage = this.props.errorMessage;\n      var defaultErrorMessage = this.context.validationForm.defaultErrorMessage || {}; //If string was passed to errorMessage, default to required error Message\n\n      if (typeof errorMessage === \"string\") errorMessage = {\n        required: errorMessage\n      };\n      errorMessage = Object.assign({}, ValidationForm.defaultErrorMessage, defaultErrorMessage, errorMessage);\n      var input = this.getInputRef();\n\n      if (input) {\n        var validityState = input.validity;\n        var newErrorMessage = \"\";\n\n        for (var prop in validityState) {\n          if (validityState[prop]) {\n            if (prop === \"customError\") newErrorMessage = input.validationMessage;else newErrorMessage = errorMessage[map[prop]];\n            break;\n          }\n        } //Add support for minLength attribute\n\n\n        if (this.props.minLength) {\n          if (input.value.length < +this.props.minLength) {\n            input.setCustomValidity(errorMessage[\"minLength\"]);\n            newErrorMessage = errorMessage[\"minLength\"].replace(\"{minLength}\", this.props.minLength);\n          } else {\n            if (newErrorMessage === errorMessage[\"minLength\"]) {\n              input.setCustomValidity(\"\");\n              newErrorMessage = \"\";\n            }\n          }\n        }\n\n        if (typeof this.props.validator === \"function\") {\n          var validatorFn = this.props.validator;\n          var value = input.value;\n\n          if (!validatorFn(value)) {\n            input.setCustomValidity(errorMessage.validator);\n            newErrorMessage = errorMessage.validator;\n          } else {\n            input.setCustomValidity(\"\");\n            newErrorMessage = \"\";\n          }\n        }\n\n        this.setState({\n          errorMessage: newErrorMessage\n        });\n      }\n    }\n  }, {\n    key: 'displayErrorMessage',\n    value: function displayErrorMessage() {\n      return this.state.errorMessage ? _react2.default.createElement('div', {\n        className: 'invalid-feedback'\n      }, this.state.errorMessage) : null;\n    } //displayBlock for radio group structure\n\n  }, {\n    key: 'displaySuccessMessage',\n    value: function displaySuccessMessage(displayBlock) {\n      return !this.state.isPristine && !this.state.errorMessage && this.props.successMessage ? _react2.default.createElement('div', {\n        className: \"valid-feedback\" + (displayBlock ? \" d-block\" : \"\")\n      }, this.props.successMessage) : null;\n    }\n  }, {\n    key: 'changeInputErrorClass',\n    value: function changeInputErrorClass() {\n      var inputRef = this.getInputRef();\n\n      if (inputRef.type !== \"radio\") {\n        if (!inputRef.validity.valid) {\n          inputRef.classList.add(\"is-invalid\");\n          inputRef.classList.remove(\"is-valid\");\n        } else {\n          inputRef.classList.remove(\"is-invalid\");\n          inputRef.classList.add(\"is-valid\");\n        }\n      }\n    } //Filter out non-DOM attribute\n\n  }]);\n\n  return BaseFormControl;\n}(_react2.default.Component);\n\nBaseFormControl.propTypes = {\n  name: _propTypes2.default.string.isRequired,\n  errorMessage: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string])\n};\nBaseFormControl.contextTypes = {\n  validationForm: _propTypes2.default.object\n};\n\nvar TextInput = exports.TextInput = function (_BaseFormControl) {\n  _inherits(TextInput, _BaseFormControl);\n\n  function TextInput() {\n    _classCallCheck(this, TextInput);\n\n    return _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).apply(this, arguments));\n  }\n\n  _createClass(TextInput, [{\n    key: 'render',\n    value: function render() {\n      var props = this.filterProps();\n\n      var multiline = props.multiline,\n          successMessage = props.successMessage,\n          validator = props.validator,\n          domProps = _objectWithoutProperties(props, ['multiline', 'successMessage', 'validator']);\n\n      return _react2.default.createElement(_react2.default.Fragment, null, multiline ? _react2.default.createElement('textarea', _extends({\n        className: this.props.className\n      }, domProps, {\n        ref: this.inputRef,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur\n      })) : _react2.default.createElement('input', _extends({\n        className: this.props.className\n      }, domProps, {\n        ref: this.inputRef,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur\n      })), this.displayErrorMessage(), this.displaySuccessMessage());\n    }\n  }]);\n\n  return TextInput;\n}(BaseFormControl);\n\nTextInput.defaultProps = _extends({}, BaseFormControl.defaultProps, {\n  className: \"form-control\",\n  multiline: false\n});\n\nvar TextInputGroup = exports.TextInputGroup = function (_BaseFormControl2) {\n  _inherits(TextInputGroup, _BaseFormControl2);\n\n  function TextInputGroup() {\n    _classCallCheck(this, TextInputGroup);\n\n    return _possibleConstructorReturn(this, (TextInputGroup.__proto__ || Object.getPrototypeOf(TextInputGroup)).apply(this, arguments));\n  }\n\n  _createClass(TextInputGroup, [{\n    key: 'render',\n    value: function render() {\n      var props = this.filterProps();\n\n      var prepend = props.prepend,\n          append = props.append,\n          inputGroupClassName = props.inputGroupClassName,\n          inputGroupStyle = props.inputGroupStyle,\n          domProps = _objectWithoutProperties(props, ['prepend', 'append', 'inputGroupClassName', 'inputGroupStyle']);\n\n      return _react2.default.createElement('div', {\n        className: inputGroupClassName,\n        style: inputGroupStyle\n      }, prepend && _react2.default.createElement('div', {\n        className: 'input-group-prepend'\n      }, prepend), _react2.default.createElement('input', _extends({}, domProps, {\n        className: this.props.className,\n        ref: this.inputRef,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur\n      })), append && _react2.default.createElement('div', {\n        className: 'input-group-append'\n      }, append), this.displayErrorMessage(), this.displaySuccessMessage());\n    }\n  }]);\n\n  return TextInputGroup;\n}(BaseFormControl);\n\nTextInputGroup.defaultProps = _extends({}, BaseFormControl.defaultProps, {\n  className: \"form-control\",\n  inputGroupClassName: \"input-group\"\n});\nTextInputGroup.propTypes = {\n  className: _propTypes2.default.string,\n  inputGroupClassName: _propTypes2.default.string,\n  inputGroupStyle: _propTypes2.default.object,\n  prepend: _propTypes2.default.element,\n  append: _propTypes2.default.element\n};\n\nvar RadioGroup = function (_BaseFormControl3) {\n  _inherits(RadioGroup, _BaseFormControl3);\n\n  function RadioGroup() {\n    _classCallCheck(this, RadioGroup);\n\n    return _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).apply(this, arguments));\n  }\n\n  _createClass(RadioGroup, [{\n    key: 'getInputRef',\n    value: function getInputRef() {\n      var inputRef = window.document.querySelectorAll('[name=\"' + this.props.name + '\"]')[0];\n      return inputRef;\n    }\n  }, {\n    key: 'mapRadioItems',\n    value: function mapRadioItems() {\n      var _this5 = this;\n\n      return _react2.default.Children.map(this.props.children, function (child) {\n        if (typeof child.type !== \"function\" || child.type.name !== RadioItem.name) {\n          console.warn(\"Only RadioItem is allowed inside RadioGroup\");\n          return;\n        }\n\n        return _react2.default.cloneElement(child, _extends({}, child.props, {\n          inline: _this5.props.inline,\n          name: _this5.props.name,\n          required: _this5.props.required,\n          defaultValue: _this5.props.defaultValue,\n          onChange: _this5.props.onChange,\n          valueSelected: _this5.props.valueSelected,\n          checkError: _this5.checkError\n        }));\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.filterProps();\n      var containerStyle = props.containerStyle,\n          containerClassName = props.containerClassName;\n      return _react2.default.createElement('div', {\n        style: containerStyle,\n        className: containerClassName\n      }, this.mapRadioItems(), this.state.errorMessage && _react2.default.createElement('div', {\n        className: 'invalid-feedback d-block'\n      }, this.state.errorMessage), this.displaySuccessMessage(true));\n    }\n  }]);\n\n  return RadioGroup;\n}(BaseFormControl);\n\nRadioGroup.defaultProps = {\n  inline: true,\n  containerStyle: {}\n};\nRadioGroup.propTypes = {\n  inline: _propTypes2.default.bool,\n  name: _propTypes2.default.string.isRequired,\n  containerStyle: _propTypes2.default.object,\n  containerClassName: _propTypes2.default.string,\n  defaultValue: _propTypes2.default.string,\n  valueSelected: _propTypes2.default.string,\n  onChange: _propTypes2.default.func\n};\n\nvar RadioItem = function (_Component) {\n  _inherits(RadioItem, _Component);\n\n  function RadioItem() {\n    var _ref;\n\n    var _temp, _this6, _ret;\n\n    _classCallCheck(this, RadioItem);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this6 = _possibleConstructorReturn(this, (_ref = RadioItem.__proto__ || Object.getPrototypeOf(RadioItem)).call.apply(_ref, [this].concat(args))), _this6), _this6.onChange = function (e) {\n      if (_this6.props.onChange) _this6.props.onChange(e, e.target.value);\n\n      _this6.props.checkError();\n    }, _temp), _possibleConstructorReturn(_this6, _ret);\n  }\n\n  _createClass(RadioItem, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          checkError = _props.checkError,\n          containerStyle = _props.containerStyle,\n          containerClassName = _props.containerClassName,\n          label = _props.label,\n          inline = _props.inline,\n          defaultValue = _props.defaultValue,\n          valueSelected = _props.valueSelected,\n          onChange = _props.onChange,\n          domProps = _objectWithoutProperties(_props, ['checkError', 'containerStyle', 'containerClassName', 'label', 'inline', 'defaultValue', 'valueSelected', 'onChange']);\n\n      var checkProps = valueSelected !== undefined && onChange ? {\n        checked: this.props.value === valueSelected\n      } : {\n        defaultChecked: this.props.value === defaultValue\n      };\n      return _react2.default.createElement('div', {\n        className: containerClassName + \" form-check \" + (inline ? \"form-check-inline\" : \"\"),\n        style: containerStyle\n      }, _react2.default.createElement('input', _extends({\n        className: 'form-check-input',\n        type: 'radio'\n      }, checkProps, {\n        onChange: this.onChange\n      }, domProps)), _react2.default.createElement('label', {\n        className: 'form-check-label',\n        htmlFor: this.props.id\n      }, label));\n    }\n  }]);\n\n  return RadioItem;\n}(_react.Component);\n\nRadioItem.defaultProps = {\n  containerStyle: {},\n  containerClassName: \"\"\n};\nRadioItem.propTypes = {\n  value: _propTypes2.default.string.isRequired,\n  id: _propTypes2.default.string.isRequired,\n  label: _propTypes2.default.string.isRequired,\n  containerStyle: _propTypes2.default.object,\n  containerClassName: _propTypes2.default.string\n};\nvar Radio = exports.Radio = {\n  RadioGroup: RadioGroup,\n  RadioItem: RadioItem\n};\n\nvar FileInput = exports.FileInput = function (_BaseFormControl4) {\n  _inherits(FileInput, _BaseFormControl4);\n\n  function FileInput() {\n    var _ref2;\n\n    var _temp2, _this7, _ret2;\n\n    _classCallCheck(this, FileInput);\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _ret2 = (_temp2 = (_this7 = _possibleConstructorReturn(this, (_ref2 = FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call.apply(_ref2, [this].concat(args))), _this7), _this7.checkFileError = function (file) {\n      var _this7$props = _this7.props,\n          maxFileSize = _this7$props.maxFileSize,\n          fileType = _this7$props.fileType,\n          _this7$props$errorMes = _this7$props.errorMessage,\n          errorMessage = _this7$props$errorMes === undefined ? {} : _this7$props$errorMes;\n      errorMessage = Object.assign({}, ValidationForm.defaultErrorMessage, errorMessage);\n      var limit = maxFileSize ? parseFileSize(maxFileSize) : null;\n      var newErrorMessage = \"\";\n      var fileExtension = file.name.slice(file.name.lastIndexOf(\".\") + 1).toLowerCase().trim();\n      fileType = fileType.map(function (type) {\n        return type.toLowerCase().trim();\n      });\n\n      if (fileType.length > 0 && !fileType.includes(fileExtension)) {\n        newErrorMessage = errorMessage[\"fileType\"];\n      } else if (limit && file.size > limit) {\n        newErrorMessage = errorMessage[\"maxFileSize\"];\n      } else {\n        newErrorMessage = \"\";\n      }\n\n      var inputRef = _this7.getInputRef();\n\n      inputRef.setCustomValidity(newErrorMessage);\n    }, _this7.handleChange = function (e) {\n      var inputRef = _this7.getInputRef();\n\n      var file = inputRef.files[0];\n      if (_this7.props.onChange) _this7.props.onChange(e, file);\n      if (!file) return _this7.checkError();\n\n      _this7.checkFileError(file);\n\n      _this7.checkError();\n    }, _temp2), _possibleConstructorReturn(_this7, _ret2);\n  }\n\n  _createClass(FileInput, [{\n    key: 'render',\n    value: function render() {\n      var props = this.filterProps();\n\n      var maxFileSize = props.maxFileSize,\n          fileType = props.fileType,\n          domProps = _objectWithoutProperties(props, ['maxFileSize', 'fileType']);\n\n      return _react2.default.createElement('div', null, _react2.default.createElement('input', _extends({}, domProps, {\n        ref: this.inputRef,\n        type: 'file',\n        onChange: this.handleChange\n      })), this.displayErrorMessage(), this.displaySuccessMessage());\n    }\n  }]);\n\n  return FileInput;\n}(BaseFormControl);\n\nFileInput.propTypes = {\n  fileType: _propTypes2.default.array,\n  maxFileSize: _propTypes2.default.string\n};\nFileInput.defaultProps = _extends({}, BaseFormControl.defaultProps, {\n  className: \"form-control\"\n});\n\nvar SelectGroup = exports.SelectGroup = function (_BaseFormControl5) {\n  _inherits(SelectGroup, _BaseFormControl5);\n\n  function SelectGroup() {\n    _classCallCheck(this, SelectGroup);\n\n    return _possibleConstructorReturn(this, (SelectGroup.__proto__ || Object.getPrototypeOf(SelectGroup)).apply(this, arguments));\n  }\n\n  _createClass(SelectGroup, [{\n    key: 'render',\n    value: function render() {\n      var domProps = this.filterProps();\n      return _react2.default.createElement('div', null, _react2.default.createElement('select', _extends({\n        className: this.props.className\n      }, domProps, {\n        ref: this.inputRef,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur,\n        value: this.props.value\n      }), this.props.children), this.displayErrorMessage(), this.displaySuccessMessage());\n    }\n  }]);\n\n  return SelectGroup;\n}(BaseFormControl);\n\nSelectGroup.defaultProps = _extends({}, BaseFormControl.defaultProps, {\n  className: \"form-control\"\n});\n\nvar Checkbox = exports.Checkbox = function (_BaseFormControl6) {\n  _inherits(Checkbox, _BaseFormControl6);\n\n  function Checkbox() {\n    var _ref3;\n\n    var _temp3, _this9, _ret3;\n\n    _classCallCheck(this, Checkbox);\n\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return _ret3 = (_temp3 = (_this9 = _possibleConstructorReturn(this, (_ref3 = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref3, [this].concat(args))), _this9), _this9.handleChange = function (e) {\n      var checked = e.target.checked;\n      if (_this9.props.onChange) _this9.props.onChange(e, checked);\n\n      _this9.checkError();\n    }, _temp3), _possibleConstructorReturn(_this9, _ret3);\n  }\n\n  _createClass(Checkbox, [{\n    key: 'render',\n    value: function render() {\n      var props = this.filterProps();\n\n      var label = props.label,\n          inline = props.inline,\n          containerStyle = props.containerStyle,\n          className = props.className,\n          checked = props.checked,\n          domProps = _objectWithoutProperties(props, ['label', 'inline', 'containerStyle', 'className', 'checked']);\n\n      return _react2.default.createElement('div', {\n        className: \"form-check \" + (inline ? \"form-check-inline\" : \"\"),\n        style: containerStyle\n      }, _react2.default.createElement('input', _extends({\n        type: 'checkbox',\n        className: this.props.className\n      }, domProps, {\n        ref: this.inputRef,\n        onChange: this.handleChange,\n        checked: this.props.value,\n        defaultChecked: this.props.defaultChecked\n      })), _react2.default.createElement('label', {\n        className: 'form-check-label',\n        htmlFor: domProps.id\n      }, this.props.label), this.displayErrorMessage(), this.displaySuccessMessage());\n    }\n  }]);\n\n  return Checkbox;\n}(BaseFormControl);\n\nCheckbox.defaultProps = _extends({}, BaseFormControl.defaultProps, {\n  className: \"form-check-input\",\n  containerStyle: {},\n  label: \"\",\n  inline: false\n});\nCheckbox.propTypes = {\n  name: _propTypes2.default.string.isRequired,\n  label: _propTypes2.default.string.isRequired,\n  containerStyle: _propTypes2.default.object,\n  inline: _propTypes2.default.bool,\n  id: _propTypes2.default.string.isRequired,\n  value: _propTypes2.default.bool,\n  defaultChecked: _propTypes2.default.bool\n};\n\nvar ValidationForm = exports.ValidationForm = function (_React$Component2) {\n  _inherits(ValidationForm, _React$Component2);\n\n  function ValidationForm() {\n    var _ref4;\n\n    var _temp4, _this10, _ret4;\n\n    _classCallCheck(this, ValidationForm);\n\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return _ret4 = (_temp4 = (_this10 = _possibleConstructorReturn(this, (_ref4 = ValidationForm.__proto__ || Object.getPrototypeOf(ValidationForm)).call.apply(_ref4, [this].concat(args))), _this10), _this10.inputs = {}, _this10.attachToForm = function (component) {\n      _this10.inputs[component.props.name] = component;\n    }, _this10.detachFromForm = function (component) {\n      delete _this10.inputs[component.props.name];\n    }, _this10.getChildContext = function () {\n      return {\n        validationForm: {\n          attachToForm: _this10.attachToForm,\n          detachFromForm: _this10.detachFromForm,\n          immediate: _this10.props.immediate,\n          defaultErrorMessage: _this10.props.defaultErrorMessage\n        }\n      };\n    }, _this10.setFormDiry = function () {\n      var form = _this10.refs.form;\n      if (!form.classList.contains('was-validated')) form.classList.add('was-validated');\n    }, _this10.mapInputs = function (inputs) {\n      var arr = Object.keys(inputs).map(function (prop) {\n        return inputs[prop];\n      });\n      return arr;\n    }, _this10.findFirstErrorInput = function (inputs) {\n      return inputs.find(function (input) {\n        return !input.getInputRef().validity.valid;\n      });\n    }, _this10.getErrorInputs = function (inputs) {\n      var map = {};\n      inputs.forEach(function (input) {\n        var inputRef = input.getInputRef();\n        var validityState = inputRef.validity;\n        if (!validityState.valid) map[inputRef.name] = input;\n      });\n      return map;\n    }, _this10.handleSubmit = function (event) {\n      var form = _this10.refs.form;\n\n      var formData = _this10.getFormData();\n\n      var inputArr = _this10.mapInputs(_this10.inputs);\n\n      _this10.setFormDiry();\n\n      _this10.validateInputs();\n\n      if (form.checkValidity() === false) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (_this10.props.onErrorSubmit) _this10.props.onErrorSubmit(event, formData, _this10.getErrorInputs(inputArr));\n\n        if (_this10.props.setFocusOnError) {\n          var firstErrorInput = _this10.findFirstErrorInput(inputArr);\n\n          firstErrorInput.getInputRef().focus();\n        }\n      } else {\n        if (_this10.props.onSubmit) _this10.props.onSubmit(event, formData, inputArr);\n      }\n    }, _this10.resetValidationState = function (isClearValue) {\n      for (var prop in _this10.inputs) {\n        _this10.inputs[prop].setState({\n          errorMessage: \"\",\n          isPristine: true\n        });\n\n        var inputRef = _this10.inputs[prop].getInputRef();\n\n        inputRef.classList.remove(\"is-valid\");\n        inputRef.classList.remove(\"is-invalid\");\n        inputRef.setCustomValidity(\"\");\n\n        if (isClearValue) {\n          if (inputRef.type == \"checkbox\") inputRef.checked = false;\n          inputRef.value = \"\";\n        }\n      }\n\n      _this10.refs.form.classList.remove(\"was-validated\");\n    }, _temp4), _possibleConstructorReturn(_this10, _ret4);\n  }\n\n  _createClass(ValidationForm, [{\n    key: 'isBaseFormControl',\n    value: function isBaseFormControl(element) {\n      if (typeof element !== \"function\") return false;\n\n      while (Object.getPrototypeOf(element) !== Object.prototype) {\n        if (Object.getPrototypeOf(element) === BaseFormControl) {\n          return true;\n        }\n\n        element = Object.getPrototypeOf(element);\n      }\n\n      return false;\n    } //Use context instead\n    // registerChildren(children) {\n    //     let newChildren = React.Children.map(children, (child) => {\n    //         //If child is our baseFormControl, then assign new props to it\n    //         if (!child) return child;\n    //         if (this.isBaseFormControl(child.type)) {\n    //             return React.cloneElement(child, {\n    //                 ...child.props,\n    //                 attachToForm: this.attachToForm,\n    //                 detachFromForm: this.detachFromForm,\n    //                 immediate: this.props.immediate,\n    //                 defaultErrorMessage: this.props.defaultErrorMessage\n    //             });\n    //         } else {\n    //             if (typeof child === 'string') return child;\n    //             return React.cloneElement(child, {\n    //                 children: (typeof child.props.children === \"string\") ? child.props.children : this.registerChildren(child.props.children)\n    //             });\n    //         }\n    //     });\n    //     return newChildren;\n    // }\n\n  }, {\n    key: 'validateInputs',\n    value: function validateInputs() {\n      for (var prop in this.inputs) {\n        this.inputs[prop].validateInput();\n      }\n    }\n  }, {\n    key: 'getFormData',\n    value: function getFormData() {\n      var model = {};\n\n      for (var name in this.inputs) {\n        var inputRef = this.inputs[name].getInputRef();\n        var value = null;\n\n        switch (inputRef.type) {\n          case \"checkbox\":\n            value = inputRef.checked;\n            break;\n\n          case \"radio\":\n            var radios = document.querySelectorAll('[name=\"' + this.props.name + '\"]');\n\n            for (var i = 0; i < radios.length; i++) {\n              if (radios[i].checked) {\n                value = radios[i].value;\n                break;\n              }\n            }\n\n            break;\n\n          case \"file\":\n            value = inputRef.files[0];\n            break;\n\n          default:\n            value = inputRef.value;\n        }\n\n        model[name] = value;\n      }\n\n      ;\n      return model;\n    } //By default only clear customError and class, if isClearValue is true, clear value also\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          onSubmit = _props2.onSubmit,\n          onErrorSubmit = _props2.onErrorSubmit,\n          immediate = _props2.immediate,\n          setFocusOnError = _props2.setFocusOnError,\n          defaultErrorMessage = _props2.defaultErrorMessage,\n          domProps = _objectWithoutProperties(_props2, ['onSubmit', 'onErrorSubmit', 'immediate', 'setFocusOnError', 'defaultErrorMessage']);\n\n      return _react2.default.createElement('form', _extends({\n        noValidate: true,\n        ref: 'form'\n      }, domProps, {\n        onSubmit: this.handleSubmit\n      }), this.props.children);\n    }\n  }]);\n\n  return ValidationForm;\n}(_react2.default.Component);\n\nValidationForm.defaultProps = {\n  className: \"needs-validation\",\n  setFocusOnError: true,\n  immediate: true,\n  defaultErrorMessage: {}\n};\nValidationForm.propTypes = {\n  className: _propTypes2.default.string,\n  defaultErrorMessage: _propTypes2.default.object,\n  setFocusOnError: _propTypes2.default.bool,\n  immediate: _propTypes2.default.bool,\n  onSubmit: _propTypes2.default.func.isRequired,\n  onErrorSubmit: _propTypes2.default.func\n};\nValidationForm.childContextTypes = {\n  validationForm: _propTypes2.default.object\n};\nValidationForm.defaultErrorMessage = {\n  required: \"This field is required\",\n  pattern: \"Input value does not match the pattern\",\n  type: \"Input value does not match the type\",\n  step: \"Step mismatch\",\n  minLength: \"Please enter at least {minLength} characters\",\n  min: \"Number is too low\",\n  max: \"Number is too high\",\n  fileType: \"File type mismatch\",\n  maxFileSize: \"File size exceed limit\",\n  validator: \"Validator check failed\"\n};","map":null,"metadata":{},"sourceType":"script"}