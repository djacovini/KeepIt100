'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _uuid = _interopRequireDefault(require("uuid"));

var _AccordionItemBody = _interopRequireDefault(require("../AccordionItemBody"));

var _AccordionItemTitle = _interopRequireDefault(require("../AccordionItemTitle"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AccordionItem =
/*#__PURE__*/
function (_Component) {
  _inherits(AccordionItem, _Component);

  function AccordionItem(props) {
    var _this;

    _classCallCheck(this, AccordionItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AccordionItem).call(this, props));
    _this.state = {
      maxHeight: props.expanded ? 'none' : 0,
      overflow: props.expanded ? 'visible' : 'hidden'
    };
    return _this;
  }

  _createClass(AccordionItem, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.uuid = this.props.uuid || _uuid.default.v4();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setMaxHeight(false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.timeout);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props = this.props,
          children = _this$props.children,
          disabled = _this$props.disabled,
          expanded = _this$props.expanded;

      if (prevProps.expanded !== expanded) {
        if (disabled) return;

        if (expanded) {
          this.handleExpand();
        } else {
          this.handleCollapse();
        }
      } else if (prevProps.children !== children) {
        this.setMaxHeight(false);
      }
    }
  }, {
    key: "handleExpand",
    value: function handleExpand() {
      var _this$props2 = this.props,
          index = _this$props2.index,
          onExpand = _this$props2.onExpand,
          slug = _this$props2.slug;
      this.setMaxHeight(false);

      if (onExpand) {
        slug ? onExpand(slug, index) : onExpand(index);
      }
    }
  }, {
    key: "handleCollapse",
    value: function handleCollapse() {
      var _this$props3 = this.props,
          index = _this$props3.index,
          onClose = _this$props3.onClose,
          slug = _this$props3.slug;
      this.setMaxHeight(true);

      if (onClose) {
        slug ? onClose(slug, index) : onClose(index);
      }
    }
  }, {
    key: "setMaxHeight",
    value: function setMaxHeight(collapse) {
      var _this2 = this;

      var _this$props4 = this.props,
          duration = _this$props4.duration,
          expanded = _this$props4.expanded;
      clearTimeout(this.timeout);

      var bodyNode = _reactDom.default.findDOMNode(this.refs.body);

      var images = bodyNode.querySelectorAll('img');

      if (images.length > 0) {
        return this.preloadImages(bodyNode, images);
      }

      this.setState({
        maxHeight: expanded || collapse ? bodyNode.scrollHeight + 'px' : 0,
        overflow: 'hidden'
      });

      if (expanded) {
        this.timeout = setTimeout(function () {
          _this2.setState({
            maxHeight: 'none',
            overflow: 'visible'
          });
        }, duration);
      } else {
        this.timeout = setTimeout(function () {
          _this2.setState({
            maxHeight: 0
          });
        }, 0);
      }
    } // Wait for images to load before calculating maxHeight

  }, {
    key: "preloadImages",
    value: function preloadImages(node) {
      var _this3 = this;

      var images = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var _this$props5 = this.props,
          duration = _this$props5.duration,
          expanded = _this$props5.expanded;
      var imagesLoaded = 0;

      var imgLoaded = function imgLoaded() {
        imagesLoaded++;

        if (imagesLoaded === images.length) {
          if (expanded) {
            _this3.setState({
              maxHeight: "".concat(node.scrollHeight, "px")
            }); // wait for animation


            setTimeout(function () {
              _this3.setState({
                overflow: 'visible'
              });
            }, duration);
          } else {
            _this3.setState({
              maxHeight: 0,
              overflow: 'hidden'
            });
          }
        }
      };

      for (var i = 0; i < images.length; i += 1) {
        var img = new Image();
        img.src = images[i].src;
        img.onload = img.onerror = imgLoaded;
      }
    }
  }, {
    key: "getProps",
    value: function getProps() {
      var _this$props6 = this.props,
          className = _this$props6.className,
          disabled = _this$props6.disabled,
          disabledClassName = _this$props6.disabledClassName,
          expanded = _this$props6.expanded,
          expandedClassName = _this$props6.expandedClassName,
          style = _this$props6.style;
      var props = {
        className: (0, _classnames.default)('react-sanfona-item', className, {
          'react-sanfona-item-expanded': expanded && !disabled,
          'react-sanfona-item-disabled': disabled
        }, expandedClassName && _defineProperty({}, expandedClassName, expanded), disabledClassName && _defineProperty({}, disabledClassName, disabled)),
        style: style
      };
      return props;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          bodyClassName = _this$props7.bodyClassName,
          bodyTag = _this$props7.bodyTag,
          children = _this$props7.children,
          disabled = _this$props7.disabled,
          duration = _this$props7.duration,
          easing = _this$props7.easing,
          onClick = _this$props7.onClick,
          onMouseOver = _this$props7.onMouseOver,
          Root = _this$props7.rootTag,
          title = _this$props7.title,
          titleClassName = _this$props7.titleClassName,
          titleTag = _this$props7.titleTag;
      var _this$state = this.state,
          maxHeight = _this$state.maxHeight,
          overflow = _this$state.overflow;
      return _react.default.createElement(Root, _extends({}, this.getProps(), {
        ref: "item"
      }), _react.default.createElement(_AccordionItemTitle.default, {
        className: titleClassName,
        expanded: this.props.expanded,
        onClick: disabled ? null : onClick,
        onMouseOver: disabled ? null : onMouseOver,
        rootTag: titleTag,
        title: title,
        uuid: this.uuid
      }), _react.default.createElement(_AccordionItemBody.default, {
        className: bodyClassName,
        duration: duration,
        easing: easing,
        expanded: this.props.expanded,
        maxHeight: maxHeight,
        overflow: overflow,
        ref: "body",
        rootTag: bodyTag,
        uuid: this.uuid
      }, children));
    }
  }]);

  return AccordionItem;
}(_react.Component);

exports.default = AccordionItem;
AccordionItem.defaultProps = {
  rootTag: 'div',
  titleTag: 'h3',
  bodyTag: 'div'
};