'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Accordion =
/*#__PURE__*/
function (_Component) {
  _inherits(Accordion, _Component);

  function Accordion(props) {
    var _this;

    _classCallCheck(this, Accordion);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, props));
    _this.state = {
      activeItems: (0, _utils.getActiveItems)(props.children, props.allowMultiple)
    };
    return _this;
  }

  _createClass(Accordion, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref) {
      var children = _ref.children,
          allowMultiple = _ref.allowMultiple;

      if (!(0, _utils.isSame)((0, _utils.getChildrenActiveItems)(this.props.children), (0, _utils.getChildrenActiveItems)(children))) {
        this.setState({
          activeItems: (0, _utils.getActiveItems)(children, allowMultiple)
        });
      }
    }
  }, {
    key: "handleChange",
    value: function handleChange(index) {
      var _this$props = this.props,
          allowMultiple = _this$props.allowMultiple,
          children = _this$props.children,
          onChange = _this$props.onChange,
          openNextAccordionItem = _this$props.openNextAccordionItem; // clone active items state array

      var activeItems = this.state.activeItems.slice(0);
      var position = activeItems.indexOf(index);

      if (position !== -1) {
        activeItems.splice(position, 1);

        if (openNextAccordionItem && index !== children.length - 1) {
          activeItems.push(index + 1);
        }
      } else if (allowMultiple) {
        activeItems.push(index);
      } else {
        activeItems = [index];
      }

      var newState = {
        activeItems: activeItems
      };
      this.setState(newState, function () {
        if (onChange) {
          onChange(newState);
        }
      });
    }
  }, {
    key: "renderItems",
    value: function renderItems() {
      var _this2 = this;

      var _this$props2 = this.props,
          children = _this$props2.children,
          duration = _this$props2.duration,
          easing = _this$props2.easing,
          isHovered = _this$props2.isHovered;

      if (!children) {
        return null;
      }

      var activeItems = this.state.activeItems;
      return (0, _utils.arrayify)(children).reduce(function (acc, item, index) {
        if (item) {
          var _item$props = item.props,
              disabled = _item$props.disabled,
              itemDuration = _item$props.duration,
              itemEasing = _item$props.easing;
          var isExpanded = !disabled && activeItems.indexOf(index) !== -1;

          var handleChange = _this2.handleChange.bind(_this2, index);

          var element = _react.default.cloneElement(item, {
            duration: itemDuration || duration,
            easing: itemEasing || easing,
            expanded: isExpanded,
            key: index,
            index: index,
            onClick: handleChange,
            onMouseOver: isHovered && !disabled ? handleChange : null,
            ref: "item-".concat(index)
          });

          acc.push(element);
        }

        return acc;
      }, []);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          className = _this$props3.className,
          style = _this$props3.style,
          Root = _this$props3.rootTag;
      return _react.default.createElement(Root, {
        className: (0, _classnames.default)('react-sanfona', className),
        style: style
      }, this.renderItems());
    }
  }]);

  return Accordion;
}(_react.Component);

exports.default = Accordion;
Accordion.defaultProps = {
  activeItems: [0],
  allowMultiple: false,
  duration: 300,
  easing: 'ease',
  rootTag: 'div'
};